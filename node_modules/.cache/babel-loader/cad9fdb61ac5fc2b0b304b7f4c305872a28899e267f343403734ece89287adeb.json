{"ast":null,"code":"import axios from \"axios\";\nimport VueCropper from 'vue-cropperjs';\nimport 'cropperjs/dist/cropper.css';\nimport CKEditor from \"@ckeditor/ckeditor5-vue\";\nimport Editor from '@ckeditor/ckeditor5-simple-build';\nimport Multiselect from \"@vueform/multiselect\";\nimport { useToast } from \"vue-toastification\";\nexport default {\n  components: {\n    ckeditor: CKEditor.component,\n    VueCropper,\n    Multiselect\n  },\n  name: \"panel_change\",\n  props: ['slug'],\n  data: () => ({\n    user: {},\n    cur_user: {},\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    selected_file: null,\n    imgSrc: \"\",\n    first_name: \"\",\n    city: \"\",\n    bio: \"\",\n    error: \"\",\n    cities: [],\n    opt_cities: [],\n    region: '',\n    regions: [],\n    user_region: {},\n    opt_regions: [],\n    msg: [],\n    oldpas: '',\n    newpas: '',\n    loading: false,\n    toast: useToast(),\n    editorConfig: {\n      toolbar: {\n        items: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'outdent', 'indent', '|', 'imageUpload', 'blockQuote', 'insertTable', 'mediaEmbed', 'undo', 'redo']\n      },\n      language: 'ru',\n      image: {\n        toolbar: ['imageTextAlternative', 'imageStyle:alignLeft', 'imageStyle:inLine', 'imageStyle:alignRight', 'toggleImageCaption', 'imageStyle:alignCenter', 'imageStyle:centeredImage']\n      },\n      table: {\n        contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells']\n      },\n      simpleUpload: {\n        // The URL that the images are uploaded to.\n        uploadUrl: ''\n        // Enable the XMLHttpRequest.withCredentials property.withCredentials: false,\n      }\n    },\n\n    editor: Editor\n  }),\n  watch: {\n    email(value) {\n      // binding this to the data value in the email input\n      this.email = value;\n      this.validateEmail(value);\n    }\n  },\n  created() {\n    this.loadUser();\n    this.loadListCities();\n    this.loadListRegions();\n    this.editorConfig.simpleUpload.uploadUrl = this.$store.state.backendUrl + 'api/v1/upload_img/none/';\n  },\n  methods: {\n    cropImage() {\n      this.selected_file = this.$refs.cropper.getCroppedCanvas().toDataURL();\n    },\n    flipX() {\n      const dom = this.$refs.flipX;\n      let scale = dom.getAttribute('data-scale');\n      scale = scale ? -scale : -1;\n      this.$refs.cropper.scaleX(scale);\n      dom.setAttribute('data-scale', scale);\n    },\n    flipY() {\n      const dom = this.$refs.flipY;\n      let scale = dom.getAttribute('data-scale');\n      scale = scale ? -scale : -1;\n      this.$refs.cropper.scaleY(scale);\n      dom.setAttribute('data-scale', scale);\n    },\n    reset() {\n      this.$refs.cropper.reset();\n    },\n    rotate(deg) {\n      this.$refs.cropper.rotate(deg);\n    },\n    setImage(e) {\n      const file = e.target.files[0];\n      if (file.type.indexOf('image/') === -1) {\n        this.toast.error('Выберите файл с фото');\n        return;\n      }\n      if (typeof FileReader === 'function') {\n        const reader = new FileReader();\n        reader.onload = event => {\n          this.imgSrc = event.target.result;\n          this.$refs.cropper.replace(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        this.toast.error('Простите, FileReader API не поддерживаеться');\n      }\n    },\n    showFileChooser() {\n      this.$refs.input.click();\n    },\n    zoom(percent) {\n      this.$refs.cropper.relativeZoom(percent);\n    },\n    onFileSelected(event) {\n      this.selected_file = event.target.files[0];\n    },\n    async loadUser() {\n      const response = await fetch(this.$store.state.backendUrl + `api/v1/${this.slug}/`, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).catch(err => {\n        let r = this.$router.resolve({\n          name: '404'\n        });\n        window.location.assign(r.href);\n      });\n      this.user = response;\n      this.username = response.username;\n      this.first_name = response.first_name;\n      this.email = response.email;\n      this.city = response.city.title;\n      this.region = response.region.title;\n      this.user_region = response.region;\n      this.bio = response.bio;\n      this.cur_user = this.$store.state.cuser;\n      if (this.user.email !== this.cur_user.email) {\n        let r = this.$router.resolve({\n          name: '404'\n        });\n        window.location.assign(r.href);\n      }\n    },\n    loadListCities() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/city`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.cities = response.data;\n        for (var el in response.data) {\n          this.opt_cities.push(response.data[el].title);\n        }\n      });\n    },\n    loadListRegions() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/regions`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.regions = response.data;\n        for (var el in response.data) {\n          this.opt_regions.push(response.data[el].title);\n        }\n      });\n    },\n    update: function () {\n      if (!this.msg['email'] && this.user.email == this.cur_user.email) {\n        const formData = new FormData();\n        if (this.region) {\n          this.region = this.regions.find(x => x.title === this.region).slug;\n        }\n        formData.append(\"first_name\", this.first_name);\n        formData.append(\"email\", this.email);\n        if (this.selected_file != null) {\n          formData.append(\"profile_img\", this.selected_file);\n        }\n        if (this.city) {\n          this.city = this.cities.find(x => x.title === this.city).slug;\n        }\n        if (this.city != null) {\n          formData.append(\"city\", this.city);\n        }\n        if (this.region != null) {\n          formData.append(\"region\", this.region);\n        }\n        formData.append(\"bio\", this.bio);\n        this.loading = true;\n        axios({\n          url: this.$store.state.backendUrl + `api/v1/profile_edit/${this.user.slug}/`,\n          data: formData,\n          method: 'PUT'\n        }).then(resp => {\n          console.log(resp), this.loading = false;\n          let r = this.$router.resolve({\n            name: 'home' // put your route information in\n          });\n\n          window.location.assign(r.href);\n        }).catch(err => {\n          this.toast.error(\" Произошла ошибка. Введите валидные данные или попробуйте позже \"), this.loading = false;\n        });\n      } else {\n        this.toast.error(\" Произошла ошибка. Введите валидные данные или попробуйте позже \");\n      }\n    },\n    validateEmail(value) {\n      if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\n        this.msg['email'] = '';\n      } else {\n        this.msg['email'] = 'Это не похоже на email';\n      }\n    },\n    resetPassword() {\n      const formData = new FormData();\n      this.loading = true;\n      formData.append('email', this.user.email);\n      axios({\n        url: this.$store.state.backendUrl + `auth/users/reset_password/`,\n        data: formData,\n        method: 'POST'\n      }).then(resp => {\n        this.loading = false;\n        this.toast.success('На Вашу почту была выслана ссылка для смены пароля');\n        console.log(resp);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}