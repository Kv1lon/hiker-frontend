{"ast":null,"code":"import axios from \"axios\";\nimport CKEditor from '@ckeditor/ckeditor5-vue';\nimport VueCropper from 'vue-cropperjs';\nimport 'cropperjs/dist/cropper.css';\nimport Editor from '@ckeditor/ckeditor5-simple-build';\nimport Multiselect from \"@vueform/multiselect\";\nimport { useToast } from \"vue-toastification\";\nexport default {\n  name: \"panel_change\",\n  props: ['slug'],\n  components: {\n    ckeditor: CKEditor.component,\n    VueCropper,\n    Multiselect\n  },\n  data: () => ({\n    description: null,\n    cur_user: {},\n    tags: [],\n    cities: [],\n    countries: [],\n    opt_tags: [],\n    opt_cities: [],\n    opt_countries: [],\n    s_tags: [],\n    s_cities: [],\n    s_countries: [],\n    r_tags: [],\n    r_cities: [],\n    r_countries: [],\n    select: null,\n    post: {},\n    title: \"\",\n    content: \"\",\n    author: \"\",\n    selected_file: null,\n    imgSrc: \"\",\n    editorData: '',\n    msg: [],\n    toast: useToast(),\n    markers: [],\n    marker_id: 1,\n    latLang: [],\n    LegPoints: [],\n    map: {},\n    directionsService: new google.maps.DirectionsService(),\n    directionsRenderer: new google.maps.DirectionsRenderer(),\n    bounds: new google.maps.LatLngBounds(),\n    // Авто масштабирование карты\n    mapOptions: {\n      center: {\n        lat: 35,\n        lng: 100.644\n      },\n      zoomControl: true,\n      zoom: 3,\n      gestureHandling: 'auto'\n    },\n    editorConfig: {\n      toolbar: {\n        items: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'outdent', 'indent', '|', 'imageUpload', 'blockQuote', 'insertTable', 'mediaEmbed', 'undo', 'redo']\n      },\n      language: 'ru',\n      image: {\n        toolbar: ['imageTextAlternative', 'imageStyle:alignLeft', 'imageStyle:inLine', 'imageStyle:alignRight', 'toggleImageCaption', 'imageStyle:alignCenter', 'imageStyle:centeredImage']\n      },\n      table: {\n        contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells']\n      },\n      simpleUpload: {\n        // The URL that the images are uploaded to.\n        uploadUrl: ''\n        // Enable the XMLHttpRequest.withCredentials property.withCredentials: false,\n      }\n    },\n\n    editor: Editor\n  }),\n  created() {\n    this.loadPost();\n    this.author = this.$store.state.cuser.id;\n    this.loadListTags();\n    this.loadListCities();\n    this.loadListCountries();\n    this.editorConfig.simpleUpload.uploadUrl = this.$store.state.backendUrl + 'api/v1/upload_img/none/';\n  },\n  watch: {\n    content(value) {\n      // binding this to the data value in the email input\n      this.content = value;\n      this.validateContent(value);\n    },\n    description(value) {\n      // binding this to the data value in the email input\n      this.description = value;\n      this.validateDescription(value);\n    },\n    title(value) {\n      this.title = value;\n      this.validateTitle(value);\n    }\n  },\n  mounted() {},\n  methods: {\n    cropImage() {\n      this.selected_file = this.$refs.cropper.getCroppedCanvas().toDataURL();\n    },\n    flipX() {\n      const dom = this.$refs.flipX;\n      let scale = dom.getAttribute('data-scale');\n      scale = scale ? -scale : -1;\n      this.$refs.cropper.scaleX(scale);\n      dom.setAttribute('data-scale', scale);\n    },\n    flipY() {\n      const dom = this.$refs.flipY;\n      let scale = dom.getAttribute('data-scale');\n      scale = scale ? -scale : -1;\n      this.$refs.cropper.scaleY(scale);\n      dom.setAttribute('data-scale', scale);\n    },\n    reset() {\n      this.$refs.cropper.reset();\n    },\n    rotate(deg) {\n      this.$refs.cropper.rotate(deg);\n    },\n    setImage(e) {\n      const file = e.target.files[0];\n      if (file.type.indexOf('image/') === -1) {\n        this.toast.warning('Выберите файл с фото');\n        return;\n      }\n      if (typeof FileReader === 'function') {\n        const reader = new FileReader();\n        reader.onload = event => {\n          this.imgSrc = event.target.result;\n          // rebuild cropperjs with the updated source\n          this.$refs.cropper.replace(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        this.toast.error('Sorry, FileReader API not supported');\n      }\n    },\n    showFileChooser() {\n      this.$refs.input.click();\n    },\n    zoom(percent) {\n      this.$refs.cropper.relativeZoom(percent);\n    },\n    onFileSelected(event) {\n      this.selected_file = event.target.files[0];\n    },\n    async loadPost() {\n      const response = await fetch(`${this.$store.getters.getServerUrl}api/v1/blog/${this.slug}`, {\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).catch(err => {\n        let r = this.$router.resolve({\n          name: '404'\n        });\n        window.location.assign(r.href);\n      });\n      this.cur_user = this.$store.state.cuser;\n      if (this.cur_user.username !== response.author) {\n        let r = this.$router.resolve({\n          name: '404'\n        });\n        window.location.assign(r.href);\n      }\n      this.post = response;\n      this.title = response.title;\n      this.content = response.content;\n      this.s_cities = response.city;\n      this.s_countries = response.country;\n      this.s_tags = response.tags;\n      this.description = response.description;\n      this.map = new google.maps.Map(this.$refs.googleMap, {\n        center: {\n          lat: 35,\n          lng: 100.644\n        },\n        zoomControl: true,\n        zoom: 3,\n        gestureHandling: 'auto'\n      }), this.initMap(response);\n    },\n    async loadListTags() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/tags?limit=100&search=`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.tags = response.data;\n        for (var el in response.data) {\n          this.opt_tags.push(response.data[el].name);\n        }\n      });\n    },\n    async loadListCities() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/city?limit=100&search=`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.cities = response.data;\n        for (var el in response.data) {\n          this.opt_cities.push(response.data[el].title);\n        }\n      });\n    },\n    async loadListCountries() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/country?limit=100&search=`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.countries = response.data;\n        for (var el in response.data) {\n          this.opt_countries.push(response.data[el].title);\n        }\n      });\n    },\n    validateContent(value) {\n      let difference = 500 - value.length;\n      if (value.length < 500) {\n        this.msg['content'] = 'Повинно бути 500 символів! ' + difference + ' залишилось символів';\n      } else {\n        this.msg['content'] = '';\n      }\n    },\n    validateDescription(value) {\n      let difference = 100 - value.length;\n      let differensb = value.length - 255;\n      if (value.length < 100) {\n        this.msg['description'] = 'Повинно бути 100 символів! ' + difference + 'залишилось символів';\n      } else if (value.length > 255) {\n        this.msg['description'] = 'Повинно бути не більше 255 символів! ' + differensb + ' зайвих символів';\n      } else {\n        this.msg['description'] = '';\n      }\n    },\n    validateTitle(value) {\n      let difference = value.length - 255;\n      if (value.length > 255) {\n        this.msg['title'] = 'Повинно бути не більше 255 символів! ' + difference + ' зайвих символів';\n      } else {\n        this.msg['title'] = '';\n      }\n    },\n    create: function () {\n      if (!this.msg['content'] && !this.msg['description'] && this.cur_user.username === this.post.author) {\n        const formData = new FormData();\n        for (var el in this.s_cities) {\n          this.r_cities.push(this.cities.find(x => x.title === this.s_cities[el]).slug);\n        }\n        for (var el in this.s_countries) {\n          this.r_countries.push(this.countries.find(x => x.title === this.s_countries[el]).slug);\n        }\n        for (var el in this.s_tags) {\n          this.r_tags.push(this.tags.find(x => x.name === this.s_tags[el]).slug);\n        }\n        formData.append(\"title\", this.title);\n        formData.append(\"author_id\", this.author);\n        formData.append(\"content\", this.content);\n        for (let i in this.r_cities) {\n          formData.append(\"city\", this.r_cities[i]);\n        }\n        for (let i in this.r_countries) {\n          formData.append(\"country\", this.r_countries[i]);\n        }\n        for (let i in this.r_tags) {\n          formData.append(\"tags\", this.r_tags[i]);\n        }\n        formData.append(\"description\", this.description);\n        if (this.selected_file != null) {\n          formData.append(\"img\", this.selected_file);\n        }\n        axios({\n          url: this.$store.state.backendUrl + `api/v1/edit/${this.slug}`,\n          data: formData,\n          method: 'PUT'\n        }).then(resp => {\n          console.log(resp);\n          axios({\n            url: this.$store.state.backendUrl + `api/v1/set_points/${resp.data.slug}`,\n            method: 'POST'\n          }).then(resp => {\n            console.log(resp);\n          });\n          for (var marker in this.markers) {\n            const formData1 = new FormData();\n            formData1.append('lng', Number(String(this.markers[marker].getPosition().lng()).slice(0, 15)));\n            formData1.append('lat', Number(String(this.markers[marker].getPosition().lat()).slice(0, 15)));\n            axios({\n              url: this.$store.state.backendUrl + `api/v1/add_point/${resp.data.slug}`,\n              data: formData1,\n              method: 'POST'\n            }).then(resp => {\n              console.log(resp);\n            });\n            console.log(Number(String(this.markers[marker].getPosition().lng()).slice(0, 15)));\n            console.log(Number(String(this.markers[marker].getPosition().lat()).slice(0, 15)));\n          }\n          let r = this.$router.resolve({\n            name: 'blog' // put your route information in\n          });\n\n          window.location.assign(r.href);\n        }).catch(err => {\n          this.toast.error(\" Відбулася помилка. Введіть валідні данні або спробуйте пізніше \");\n        });\n      } else {\n        this.toast.error(\"Відбулася помилка. Введіть валідні данні або спробуйте пізніше \");\n      }\n    },\n    getRoutePointsAndWaypoints(Points, marker) {\n      this.drawRoutePointsAndWaypoints(Points, marker);\n    },\n    drawRoute(originAddress, destinationAddress, _waypoints, marker) {\n      //Define a request variable for route .\n      var _request = '';\n\n      //This is for more then two locatins\n      if (_waypoints.length > 0) {\n        _request = {\n          origin: originAddress,\n          destination: destinationAddress,\n          waypoints: _waypoints,\n          //an array of waypoints\n          optimizeWaypoints: true,\n          //set to true if you want google to determine the shortest route or false to use the order specified.\n          travelMode: google.maps.DirectionsTravelMode.DRIVING\n        };\n      } else {\n        //This is for one or two locations. Here noway point is used.\n        _request = {\n          origin: originAddress,\n          destination: destinationAddress,\n          travelMode: google.maps.DirectionsTravelMode.DRIVING\n        };\n      }\n\n      //This will take the request and draw the route and return response and status as output\n      var that = this;\n      this.directionsService.route(_request, function (_response, _status) {\n        if (_status === google.maps.DirectionsStatus.OK) {\n          that.directionsRenderer.setDirections(_response);\n        } else if (_status === google.maps.DirectionsStatus.ZERO_RESULTS) {\n          that.toast.error('Неможливо поставити мітку');\n          for (var i = 0; i < that.markers.length; i++) {\n            if (that.markers[i].id === marker.id) {\n              //Remove the marker from Map\n              marker.setMap(null);\n              //Remove the marker from array.\n              that.markers.splice(i, 1);\n              that.latLang.splice(i, 1);\n              return;\n            }\n          }\n        }\n      });\n    },\n    drawRoutePointsAndWaypoints(Points, marker) {\n      //Define a variable for waypoints.\n      var _waypoints = new Array();\n      if (Points.length > 2)\n        //Waypoints will be come.\n        {\n          for (var j = 1; j < Points.length - 1; j++) {\n            var address = Points[j];\n            if (address !== \"\") {\n              _waypoints.push({\n                location: address,\n                stopover: true //stopover is used to show marker on map for waypoints\n              });\n            }\n          }\n          //Call a drawRoute() function\n          this.drawRoute(Points[0], Points[Points.length - 1], _waypoints, marker);\n        } else if (Points.length > 1) {\n        //Call a drawRoute() function only for start and end locations\n        this.drawRoute(Points[this.latLang.length - 2], Points[Points.length - 1], _waypoints, marker);\n      } else {\n        //Call a drawRoute() function only for one point as start and end locations.\n        this.drawRoute(Points[this.latLang.length - 1], Points[Points.length - 1], _waypoints, marker);\n      }\n    },\n    placeMarker(map, marker) {\n      marker.id = this.marker_id;\n      this.marker_id++;\n      this.markers.push(marker);\n      return marker;\n    },\n    initMap(response) {\n      var zoom_option = 1;\n      this.directionsRenderer.setMap(this.map);\n      this.directionsRenderer.setOptions({\n        draggable: true,\n        suppressMarkers: true\n      });\n      var that = this;\n      for (var el in response.waypoints) {\n        console.log(response.waypoints[el]);\n        var ll = {\n          lat: Number(response.waypoints[el].lat),\n          lng: Number(response.waypoints[el].lng)\n        };\n        let marker = new google.maps.Marker({\n          position: ll,\n          map: this.map\n        });\n        that.latLang.push(ll);\n        that.LegPoints.push('');\n        that.placeMarker(this.map, marker);\n        let id = marker.id;\n        that.getRoutePointsAndWaypoints(that.latLang, marker);\n        google.maps.event.addListener(marker, \"click\", function (e) {\n          for (var i = 0; i < that.markers.length; i++) {\n            if (that.markers[i].id === id) {\n              //Remove the marker from Map\n              marker.setMap(null);\n              //Remove the marker from array.\n              that.markers.splice(i, 1);\n              that.latLang.splice(i, 1);\n              return;\n            }\n          }\n        });\n      }\n      google.maps.event.addListener(this.map, 'click', function (event) {\n        var marker = new google.maps.Marker({\n          position: event.latLng,\n          map: that.map\n        });\n        that.latLang.push(event.latLng);\n        that.LegPoints.push('');\n        that.getRoutePointsAndWaypoints(that.latLang, marker);\n        that.placeMarker(that.map, marker);\n        var id = marker.id;\n        google.maps.event.addListener(marker, \"click\", function (e) {\n          for (var i = 0; i < that.markers.length; i++) {\n            if (that.markers[i].id === id) {\n              //Remove the marker from Map\n              marker.setMap(null);\n              //Remove the marker from array.\n              that.markers.splice(i, 1);\n              that.latLang.splice(i, 1);\n              return;\n            }\n          }\n        });\n      });\n      google.maps.event.addListener(this.directionsRenderer, 'directions_changed', function () {\n        var myroute = this.directionsRenderer.directions.routes[0];\n        CreateRoute(myroute);\n        zoom_option = that.map.getZoom();\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}