{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nimport { useToast } from 'vue-toastification';\nexport default createStore({\n  state: {\n    backendUrl: \"http://159.89.105.77:8001/\",\n    status: '',\n    access: localStorage.getItem('access') || '',\n    refresh: localStorage.getItem('refresh') || '',\n    cuser: JSON.parse(localStorage.getItem('cuser')) || {},\n    tickets_arr: JSON.parse(localStorage.getItem('tickets_arr')) || [],\n    ticket: JSON.parse(localStorage.getItem('ticket')) || []\n  },\n  mutations: {\n    auth_request(state) {\n      state.status = 'loading';\n    },\n    auth_success(state, access, refresh) {\n      state.status = 'success';\n      state.access = access;\n      state.refresh = refresh;\n    },\n    auth_error(state) {\n      state.status = 'error';\n    },\n    logout(state) {\n      state.status = '';\n      state.access = '';\n      state.refresh = '';\n      state.cuser = {};\n    },\n    set_user(state, cuser) {\n      state.cuser = cuser;\n    },\n    tickets_arr(state, data) {\n      state.tickets_arr = data;\n    },\n    ticket(state, data) {\n      state.ticket = data;\n    }\n  },\n  actions: {\n    tickets_arr({\n      commit\n    }, data) {\n      commit('tickets_arr', data.data);\n      localStorage.setItem('tickets_arr', JSON.stringify(data.data));\n    },\n    ticket({\n      commit\n    }, data) {\n      commit('ticket', data.data);\n      localStorage.setItem('ticket', JSON.stringify(data.data));\n    },\n    login({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        commit('auth_request');\n        axios({\n          url: this.state.backendUrl + 'auth/jwt/create',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          const access = resp.data.access;\n          const refresh = resp.data.refresh;\n          localStorage.setItem('access', access);\n          localStorage.setItem('refresh', refresh);\n          commit('auth_success', access, refresh);\n          resolve(resp);\n        }).catch(err => {\n          commit('auth_error');\n          localStorage.removeItem('access');\n          localStorage.removeItem('refresh');\n          localStorage.removeItem('cuser');\n          reject(err);\n        });\n      });\n    },\n    set_user({\n      commit\n    }, token) {\n      return new Promise((resolve, reject) => {\n        axios({\n          url: this.state.backendUrl + `auth/users/me/`,\n          method: 'GET',\n          headers: {\n            'Content-type': 'application/json',\n            'Authorization': `JWT ${token}`\n          }\n        }).then(response => {\n          const cuser = response.data;\n          localStorage.setItem('cuser', JSON.stringify(cuser));\n          commit('set_user', cuser);\n          resolve(response);\n        }).catch(err => {\n          commit('auth_error', err);\n          reject(err);\n        });\n      });\n    },\n    register({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        commit('auth_request');\n        axios({\n          url: this.state.backendUrl + 'auth/users/',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          resolve(resp);\n        }).catch(err => {\n          commit('auth_error', err);\n          reject(err);\n        });\n      });\n    },\n    logout({\n      commit\n    }) {\n      return new Promise((resolve, reject) => {\n        commit('logout');\n        localStorage.removeItem('access');\n        localStorage.removeItem('refresh');\n        localStorage.removeItem('cuser');\n        resolve();\n      });\n    },\n    refresh({\n      commit\n    }, user) {\n      return new Promise((resolve, reject) => {\n        console.log(\"refresh!!!\" + this.state.cuser.username);\n        commit('auth_request');\n        axios({\n          url: this.state.backendUrl + 'auth/jwt/refresh/',\n          data: user,\n          method: 'POST'\n        }).then(resp => {\n          const access = resp.data.access;\n          const refresh = resp.data.refresh;\n          localStorage.setItem('access', access);\n          localStorage.setItem('refresh', refresh);\n          commit('auth_success', access, refresh);\n          resolve(resp);\n        }).catch(err => {\n          commit('auth_error');\n          localStorage.removeItem('access');\n          localStorage.removeItem('refresh');\n          localStorage.removeItem('cuser');\n          reject(err);\n        });\n      });\n    }\n  },\n  modules: {},\n  getters: {\n    getServerUrl: state => {\n      return state.backendUrl;\n    },\n    isLoggedIn: state => !!state.access,\n    authStatus: state => state.status\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}