{"ast":null,"code":"import axios from \"axios\";\nimport { FontAwesomeIcon } from \"@fortawesome/vue-fontawesome\";\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { useToast } from \"vue-toastification\";\nlibrary.add(faHeart);\nexport default {\n  name: \"post_page\",\n  props: ['slug'],\n  components: {\n    'font-awesome-icon': FontAwesomeIcon\n  },\n  data: () => ({\n    Post: [],\n    user: {},\n    content: \"\",\n    like_status: \"\",\n    comments_count: \"\",\n    selected_file: null,\n    tags_count: \"\",\n    likes_count: \"\",\n    popular: [],\n    toast: useToast(),\n    markers: [],\n    marker_id: 1,\n    latLang: [],\n    LegPoints: [],\n    map: null,\n    directionsService: new google.maps.DirectionsService(),\n    _directionsRenderer: new google.maps.DirectionsRenderer(),\n    bounds: new google.maps.LatLngBounds(),\n    // Авто масштабирование карты\n    mapOptions: {\n      center: {\n        lat: 35,\n        lng: 100.644\n      },\n      zoomControl: true,\n      zoom: 3,\n      gestureHandling: 'auto'\n    },\n    status: 'ok'\n  }),\n  created() {\n    this.loadPost();\n    this.loadPopularPosts();\n    this.user = this.$store.state.cuser;\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  destroyed() {\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  methods: {\n    async loadPost() {\n      axios({\n        url: `${this.$store.getters.getServerUrl}api/v1/blog/${this.slug}`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.Post = response.data;\n        this.comments_count = response.data.comments.length;\n        this.tags_count = response.data.tags.length;\n        this.likes_count = response.data.likes.length;\n        if (response.data.likes.includes(this.$store.state.cuser.username)) {\n          this.like_status = \"like\";\n        } else {\n          this.like_status = \"unlike\";\n        }\n        if (response.data.waypoints.length !== 0) {\n          this.map = new google.maps.Map(this.$refs.googleMap, {\n            center: {\n              lat: 35,\n              lng: 100.644\n            },\n            zoomControl: true,\n            zoom: 3,\n            gestureHandling: 'auto'\n          });\n          this.initMap(response);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    async Like() {\n      const formData = new FormData();\n      formData.append(\"id\", this.$store.state.cuser.id);\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/like/${this.Post.id}`,\n        data: formData,\n        method: 'POST'\n      }).then(resp => {\n        this.loadPost();\n      });\n    },\n    async Unlike() {\n      const formData = new FormData();\n      formData.append(\"id\", this.$store.state.cuser.id);\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/unlike/${this.Post.id}`,\n        data: formData,\n        method: 'POST'\n      }).then(resp => {\n        this.loadPost();\n      });\n    },\n    create: function () {\n      const formData = new FormData();\n      formData.append(\"author_id\", this.user.id);\n      formData.append(\"text\", this.content);\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/comment_create/${this.slug}`,\n        data: formData,\n        method: 'POST'\n      }).then(resp => {\n        this.content = '', this.toast.success('Комментарий создан и отправлен на рассмотрение');\n      }).catch(err => this.toast.error('Произошла ошибка: ' + err));\n    },\n    async loadPopularPosts() {\n      axios({\n        url: this.$store.state.backendUrl + `api/v1/blog?limit=3&search=&date=month&ordering=descending`,\n        method: 'GET',\n        headers: {\n          'Content-type': 'application/json'\n        }\n      }).then(response => {\n        this.popular = response.data.results;\n      });\n    },\n    goTo(slug) {\n      this.$router.push({\n        name: 'post',\n        params: {\n          slug: slug\n        }\n      });\n    },\n    getRoutePointsAndWaypoints(Points) {\n      this.drawRoutePointsAndWaypoints(Points);\n    },\n    drawRoute(originAddress, destinationAddress, _waypoints) {\n      //Define a request variable for route .\n      var _request = '';\n\n      //This is for more then two locatins\n      if (_waypoints.length > 0) {\n        _request = {\n          origin: originAddress,\n          destination: destinationAddress,\n          waypoints: _waypoints,\n          //an array of waypoints\n          optimizeWaypoints: true,\n          //set to true if you want google to determine the shortest route or false to use the order specified.\n          travelMode: google.maps.DirectionsTravelMode.DRIVING\n        };\n      } else {\n        //This is for one or two locations. Here noway point is used.\n        _request = {\n          origin: originAddress,\n          destination: destinationAddress,\n          travelMode: google.maps.DirectionsTravelMode.DRIVING\n        };\n      }\n\n      //This will take the request and draw the route and return response and status as output\n      var that = this;\n      this.directionsService.route(_request, function (_response, _status) {\n        if (_status == google.maps.DirectionsStatus.OK) {\n          that._directionsRenderer.setDirections(_response);\n        }\n      });\n    },\n    drawRoutePointsAndWaypoints(Points) {\n      //Define a variable for waypoints.\n      var _waypoints = new Array();\n      if (Points.length > 2)\n        //Waypoints will be come.\n        {\n          for (var j = 1; j < Points.length - 1; j++) {\n            var address = Points[j];\n            if (address !== \"\") {\n              _waypoints.push({\n                location: address,\n                stopover: true //stopover is used to show marker on map for waypoints\n              });\n            }\n          }\n          //Call a drawRoute() function\n          this.drawRoute(Points[0], Points[Points.length - 1], _waypoints);\n        } else if (Points.length > 1) {\n        //Call a drawRoute() function only for start and end locations\n        this.drawRoute(Points[this.latLang.length - 2], Points[Points.length - 1], _waypoints);\n      } else {\n        //Call a drawRoute() function only for one point as start and end locations.\n        this.drawRoute(Points[this.latLang.length - 1], Points[Points.length - 1], _waypoints);\n      }\n    },\n    placeMarker(map, marker) {\n      marker.id = this.marker_id;\n      this.marker_id++;\n      this.markers.push(marker);\n      return marker;\n    },\n    initMap(response) {\n      var zoom_option = 1;\n      this._directionsRenderer.setMap(this.map);\n      this._directionsRenderer.setOptions({\n        draggable: true,\n        suppressMarkers: true\n      });\n      var that = this;\n      for (var el in response.data.waypoints) {\n        var ll = {\n          lat: Number(response.data.waypoints[el].lat),\n          lng: Number(response.data.waypoints[el].lng)\n        };\n        let marker = new google.maps.Marker({\n          position: ll,\n          map: this.map\n        });\n        that.latLang.push(ll);\n        that.LegPoints.push('');\n        that.getRoutePointsAndWaypoints(that.latLang);\n        that.placeMarker(this.map, marker);\n        let id = marker.id;\n      }\n      google.maps.event.addListener(this._directionsRenderer, 'directions_changed', function () {\n        var myroute = this._directionsRenderer.directions.routes[0];\n        CreateRoute(myroute);\n        zoom_option = that.map.getZoom();\n      });\n    },\n    handleScroll() {\n      if (document.body.scrollHeight / 2 < window.pageYOffset && this.status !== 'sent') {\n        axios({\n          url: this.$store.state.backendUrl + `api/v1/add_view/${this.Post.slug}`,\n          method: 'GET'\n        }).then(this.status = 'sent');\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}